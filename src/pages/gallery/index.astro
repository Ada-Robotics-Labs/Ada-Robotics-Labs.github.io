      
---
import { Container } from '@components/odyssey-theme';
import Layout from '../../layouts/Page.astro';

// Array de objetos com URL, nome e descrição
const imageData = [
  {
    url: '/assets/gallery/teste.jpg',
    name: 'Imagem 1',
    description: 'Uma bela paisagem.'
  },
  {
    url: '/assets/gallery/image1.jpg',
    name: 'Imagem 2',
    description: 'Um retrato artístico.'
  },
  {
    url: '/assets/gallery/image2.jpg',
    name: 'Imagem 3',
    description: 'Uma foto de arquitetura.'
  },
  // Adicione mais objetos conforme necessário
];

const seo = {
  title: 'Gallery | Astro Odyssey Theme',
  description: 'A beautiful gallery of images.',
};
---

<Layout {seo}>
  <Container>
    <section class="gallery">
      <h2>Photo Gallery</h2>
      <div class="gallery-grid">
        {imageData.map((image, index) => (
          <button class="gallery-item-button" data-index={index}>
            <img
              src={image.url}
              alt={image.name}
              class="gallery-item"
            />
          </button>
        ))}
      </div>
    </section>

    <div id="lightbox" class="lightbox">
      <span class="close">×</span>
      <img id="lightbox-img" class="lightbox-content" src="" alt="Imagem em destaque" />
      <div class="lightbox-details">
        <h3 id="lightbox-title"></h3>
        <p id="lightbox-description"></p>
      </div>
      <button class="prev">❮</button>
      <button class="next">❯</button>
    </div>
  </Container>
</Layout>

<style>
  .gallery {
    text-align: center;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
    padding: 20px;
  }

  .gallery-item-button {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    cursor: pointer;
  }

  .gallery-item {
    width: 100%;
    height: auto;
    border-radius: 8px;
    transition: transform 0.2s ease-in-out;
  }

  .gallery-item:hover {
    transform: scale(1.05);
  }

  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    justify-content: center;
    align-items: center;
  }

  .lightbox-content {
    max-width: 80%;
    max-height: 80%;
  }

  .lightbox-details {
    color: white;
    text-align: center;
    margin-top: 10px;
  }

  .close,
  .prev,
  .next {
    position: absolute;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    border: none;
    background: none;
  }

  .close {
    top: 10px;
    right: 20px;
  }

  .prev {
    left: 10px;
  }

  .next {
    right: 10px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const imageData = JSON.parse(document.currentScript.textContent);
    const galleryGrid = document.querySelector('.gallery-grid');
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-img');
    const lightboxTitle = document.getElementById('lightbox-title');
    const lightboxDescription = document.getElementById('lightbox-description');
    const closeButton = document.querySelector('.close');
    const prevButton = document.querySelector('.prev');
    const nextButton = document.querySelector('.next');

    let currentImageIndex = 0;

    // Funções de manipulação da Lightbox
    function openLightbox(index) {
      currentImageIndex = index;
      lightboxImg.src = imageData[index].url;
      lightboxTitle.textContent = imageData[index].name;
      lightboxDescription.textContent = imageData[index].description;
      lightbox.style.display = 'flex';
    }

    function closeLightbox() {
      lightbox.style.display = 'none';
    }

    function prevImage() {
      currentImageIndex = (currentImageIndex - 1 + imageData.length) % imageData.length;
      lightboxImg.src = imageData[currentImageIndex].url;
      lightboxTitle.textContent = imageData[currentImageIndex].name;
      lightboxDescription.textContent = imageData[currentImageIndex].description;
    }

    function nextImage() {
      currentImageIndex = (currentImageIndex + 1) % imageData.length;
      lightboxImg.src = imageData[currentImageIndex].url;
      lightboxTitle.textContent = imageData[currentImageIndex].name;
      lightboxDescription.textContent = imageData[currentImageIndex].description;
    }

    // Adiciona event listeners para cada imagem
    galleryGrid.addEventListener('click', (event) => {
      if (event.target.classList.contains('gallery-item')) {
        const index = parseInt(event.target.parentElement.dataset.index);
        openLightbox(index);
      }
    });

    // Adiciona event listeners aos botões da Lightbox
    closeButton.addEventListener('click', closeLightbox);
    prevButton.addEventListener('click', prevImage);
    nextButton.addEventListener('click', nextImage);
  });
</script>
<script is:inline>
  {
    JSON.stringify(imageData);
  }
</script>

    